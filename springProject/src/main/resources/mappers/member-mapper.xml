<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">

	<resultMap type="Member" id="memberResult"> <!-- type="(별칭)" -->
		<result column="user_id" property="userId" />
		<result column="user_pwd" property="userPwd" />
		<result column="user_name" property="userName" />
		<result column="email" property="email" />
		<result column="gender" property="gender" />
		<result column="age" property="age" />
		<result column="phone" property="phone" />
		<result column="address" property="address" />
		<result column="enroll_date" property="enrollDate" />
		<result column="modify_date" property="modifyDate" />
		<result column="status" property="status" />
	</resultMap>
	
	

	<!-- 비밀번호 암호화 전
	<select id="loginMember" resultMap="memberResult">
		select
		        user_id
		      , user_pwd
		      , user_name
		      , email
		      , gender
		      , age
		      , phone
		      , address
		      , enroll_date
		      , modify_date
		      , status
		  from member
		 where status = 'Y'
		   and user_id = #{userId}
		   and user_pwd = #{userPwd}
	</select>
	 -->
	 
	 <!-- 비밀번호 암호화 후 (where절에서 비밀번호 비교는 뺌 (user_pwd 조건 삭제) / 비교는 Controller에서 .matches 메소드로 할것임)-->
	 <select id="loginMember" resultMap="memberResult">
		select
		        user_id
		      , user_pwd
		      , user_name
		      , email
		      , gender
		      , age
		      , phone
		      , address
		      , enroll_date
		      , modify_date
		      , status
		  from member
		 where status = 'Y'
		   and user_id = #{userId}
	</select>
	
	
	<insert id="insertMember">
		insert
		  into member
		      (
		        user_id
		      , user_pwd
		      , user_name
		      , email
		      , gender
		      , age
		      , phone
		      , address
		      )
		values
		      (
		      	#{userId}
		      , #{userPwd}	<!-- 사용자가 입력한 비밀번호의 암호문 -->
		      , #{userName}
		      , #{email}
		      , #{gender}
		      , #{age}
		      , #{phone}
		      , #{address}
		      )
	</insert>
	
	<update id="updateMember">
		update  member
		   set  user_name = #{userName}
		      , email = #{email}
		      , age = #{age}
		      , phone = #{phone}
		      , address = #{address}
		      , gender = #{gender}
		      , modify_date = sysdate  <!-- 수정이니까 수정날짜! -->
		 where  user_id = #{userId}
	</update>
	
	<update id="deleteMember">
		update member
		   set status = 'N'
		 where user_id = #{userId}
	</update>

</mapper>
